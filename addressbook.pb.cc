// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: addressbook.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "addressbook.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace tutorial {

namespace {

const ::google::protobuf::Descriptor* Person_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Person_reflection_ = NULL;
const ::google::protobuf::Descriptor* Person_PhoneNumber_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Person_PhoneNumber_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Person_PhoneType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AddressBook_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddressBook_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_addressbook_2eproto() {
  protobuf_AddDesc_addressbook_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "addressbook.proto");
  GOOGLE_CHECK(file != NULL);
  Person_descriptor_ = file->message_type(0);
  static const int Person_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, email_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tuint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tuint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tsint32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tsint64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tbool_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tsfixed64_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tsfixed32_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, tfloat_),
  };
  Person_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Person_descriptor_,
      Person::default_instance_,
      Person_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _has_bits_[0]),
      -1,
      -1,
      sizeof(Person),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person, _internal_metadata_),
      -1);
  Person_PhoneNumber_descriptor_ = Person_descriptor_->nested_type(0);
  static const int Person_PhoneNumber_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person_PhoneNumber, number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person_PhoneNumber, type_),
  };
  Person_PhoneNumber_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Person_PhoneNumber_descriptor_,
      Person_PhoneNumber::default_instance_,
      Person_PhoneNumber_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person_PhoneNumber, _has_bits_[0]),
      -1,
      -1,
      sizeof(Person_PhoneNumber),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Person_PhoneNumber, _internal_metadata_),
      -1);
  Person_PhoneType_descriptor_ = Person_descriptor_->enum_type(0);
  AddressBook_descriptor_ = file->message_type(1);
  static const int AddressBook_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, person_),
  };
  AddressBook_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddressBook_descriptor_,
      AddressBook::default_instance_,
      AddressBook_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, _has_bits_[0]),
      -1,
      -1,
      sizeof(AddressBook),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddressBook, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_addressbook_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Person_descriptor_, &Person::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Person_PhoneNumber_descriptor_, &Person_PhoneNumber::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddressBook_descriptor_, &AddressBook::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_addressbook_2eproto() {
  delete Person::default_instance_;
  delete Person_reflection_;
  delete Person_PhoneNumber::default_instance_;
  delete Person_PhoneNumber_reflection_;
  delete AddressBook::default_instance_;
  delete AddressBook_reflection_;
}

void protobuf_AddDesc_addressbook_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021addressbook.proto\022\010tutorial\"\270\003\n\006Person"
    "\022\014\n\004name\030\001 \002(\t\022\n\n\002id\030\002 \002(\003\022\r\n\005email\030\003 \001("
    "\t\022+\n\005phone\030\004 \003(\0132\034.tutorial.Person.Phone"
    "Number\022\016\n\006tint32\030\005 \002(\005\022\016\n\006tint64\030\006 \002(\003\022\017"
    "\n\007tuint32\030\007 \002(\r\022\017\n\007tuint64\030\010 \002(\004\022\017\n\007tsin"
    "t32\030\t \002(\021\022\017\n\007tsint64\030\n \002(\022\022\r\n\005tbool\030\013 \002("
    "\010\022\020\n\010tfixed64\030\014 \002(\006\022\021\n\ttsfixed64\030\r \002(\020\022\017"
    "\n\007tdouble\030\016 \002(\001\022\020\n\010tfixed32\030\017 \002(\007\022\021\n\ttsf"
    "ixed32\030\020 \002(\017\022\016\n\006tfloat\030\021 \002(\002\032M\n\013PhoneNum"
    "ber\022\016\n\006number\030\001 \002(\t\022.\n\004type\030\002 \001(\0162\032.tuto"
    "rial.Person.PhoneType:\004HOME\"+\n\tPhoneType"
    "\022\n\n\006MOBILE\020\000\022\010\n\004HOME\020\001\022\010\n\004WORK\020\002\"/\n\013Addr"
    "essBook\022 \n\006person\030\001 \003(\0132\020.tutorial.Perso"
    "n", 521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "addressbook.proto", &protobuf_RegisterTypes);
  Person::default_instance_ = new Person();
  Person_PhoneNumber::default_instance_ = new Person_PhoneNumber();
  AddressBook::default_instance_ = new AddressBook();
  Person::default_instance_->InitAsDefaultInstance();
  Person_PhoneNumber::default_instance_->InitAsDefaultInstance();
  AddressBook::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_addressbook_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_addressbook_2eproto {
  StaticDescriptorInitializer_addressbook_2eproto() {
    protobuf_AddDesc_addressbook_2eproto();
  }
} static_descriptor_initializer_addressbook_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

const ::google::protobuf::EnumDescriptor* Person_PhoneType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_PhoneType_descriptor_;
}
bool Person_PhoneType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Person_PhoneType Person::MOBILE;
const Person_PhoneType Person::HOME;
const Person_PhoneType Person::WORK;
const Person_PhoneType Person::PhoneType_MIN;
const Person_PhoneType Person::PhoneType_MAX;
const int Person::PhoneType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person_PhoneNumber::kNumberFieldNumber;
const int Person_PhoneNumber::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person_PhoneNumber::Person_PhoneNumber()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.Person.PhoneNumber)
}

void Person_PhoneNumber::InitAsDefaultInstance() {
}

Person_PhoneNumber::Person_PhoneNumber(const Person_PhoneNumber& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.Person.PhoneNumber)
}

void Person_PhoneNumber::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Person_PhoneNumber::~Person_PhoneNumber() {
  // @@protoc_insertion_point(destructor:tutorial.Person.PhoneNumber)
  SharedDtor();
}

void Person_PhoneNumber::SharedDtor() {
  number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Person_PhoneNumber::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person_PhoneNumber::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_PhoneNumber_descriptor_;
}

const Person_PhoneNumber& Person_PhoneNumber::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_addressbook_2eproto();
  return *default_instance_;
}

Person_PhoneNumber* Person_PhoneNumber::default_instance_ = NULL;

Person_PhoneNumber* Person_PhoneNumber::New(::google::protobuf::Arena* arena) const {
  Person_PhoneNumber* n = new Person_PhoneNumber;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person_PhoneNumber::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_number()) {
      number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Person_PhoneNumber::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.Person.PhoneNumber)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string number = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->number().data(), this->number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.Person.PhoneNumber.number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .tutorial.Person.PhoneType type = 2 [default = HOME];
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::tutorial::Person_PhoneType_IsValid(value)) {
            set_type(static_cast< ::tutorial::Person_PhoneType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.Person.PhoneNumber)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.Person.PhoneNumber)
  return false;
#undef DO_
}

void Person_PhoneNumber::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.Person.PhoneNumber)
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.Person.PhoneNumber.number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->number(), output);
  }

  // optional .tutorial.Person.PhoneType type = 2 [default = HOME];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.Person.PhoneNumber)
}

::google::protobuf::uint8* Person_PhoneNumber::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Person.PhoneNumber)
  // required string number = 1;
  if (has_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->number().data(), this->number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.Person.PhoneNumber.number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->number(), target);
  }

  // optional .tutorial.Person.PhoneType type = 2 [default = HOME];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Person.PhoneNumber)
  return target;
}

int Person_PhoneNumber::ByteSize() const {
  int total_size = 0;

  // required string number = 1;
  if (has_number()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->number());
  }
  // optional .tutorial.Person.PhoneType type = 2 [default = HOME];
  if (has_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person_PhoneNumber::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Person_PhoneNumber* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Person_PhoneNumber>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Person_PhoneNumber::MergeFrom(const Person_PhoneNumber& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_number()) {
      set_has_number();
      number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Person_PhoneNumber::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person_PhoneNumber::CopyFrom(const Person_PhoneNumber& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person_PhoneNumber::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Person_PhoneNumber::Swap(Person_PhoneNumber* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person_PhoneNumber::InternalSwap(Person_PhoneNumber* other) {
  number_.Swap(&other->number_);
  std::swap(type_, other->type_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Person_PhoneNumber::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Person_PhoneNumber_descriptor_;
  metadata.reflection = Person_PhoneNumber_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Person::kNameFieldNumber;
const int Person::kIdFieldNumber;
const int Person::kEmailFieldNumber;
const int Person::kPhoneFieldNumber;
const int Person::kTint32FieldNumber;
const int Person::kTint64FieldNumber;
const int Person::kTuint32FieldNumber;
const int Person::kTuint64FieldNumber;
const int Person::kTsint32FieldNumber;
const int Person::kTsint64FieldNumber;
const int Person::kTboolFieldNumber;
const int Person::kTfixed64FieldNumber;
const int Person::kTsfixed64FieldNumber;
const int Person::kTdoubleFieldNumber;
const int Person::kTfixed32FieldNumber;
const int Person::kTsfixed32FieldNumber;
const int Person::kTfloatFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Person::Person()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.Person)
}

void Person::InitAsDefaultInstance() {
}

Person::Person(const Person& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.Person)
}

void Person::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tint32_ = 0;
  tint64_ = GOOGLE_LONGLONG(0);
  tuint32_ = 0u;
  tuint64_ = GOOGLE_ULONGLONG(0);
  tsint32_ = 0;
  tsint64_ = GOOGLE_LONGLONG(0);
  tbool_ = false;
  tfixed64_ = GOOGLE_ULONGLONG(0);
  tsfixed64_ = GOOGLE_LONGLONG(0);
  tdouble_ = 0;
  tfixed32_ = 0u;
  tsfixed32_ = 0;
  tfloat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Person::~Person() {
  // @@protoc_insertion_point(destructor:tutorial.Person)
  SharedDtor();
}

void Person::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Person::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Person::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Person_descriptor_;
}

const Person& Person::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_addressbook_2eproto();
  return *default_instance_;
}

Person* Person::default_instance_ = NULL;

Person* Person::New(::google::protobuf::Arena* arena) const {
  Person* n = new Person;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Person::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Person*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 247u) {
    ZR_(tint64_, tuint64_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    id_ = GOOGLE_LONGLONG(0);
    if (has_email()) {
      email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(tsint64_, tsfixed32_);
  }
  tfloat_ = 0;

#undef ZR_HELPER_
#undef ZR_

  phone_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Person::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.Person)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.Person.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int64 id = 2;
      case 2: {
        if (tag == 16) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_email;
        break;
      }

      // optional string email = 3;
      case 3: {
        if (tag == 26) {
         parse_email:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_email()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->email().data(), this->email().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tutorial.Person.email");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_phone;
        break;
      }

      // repeated .tutorial.Person.PhoneNumber phone = 4;
      case 4: {
        if (tag == 34) {
         parse_phone:
          DO_(input->IncrementRecursionDepth());
         parse_loop_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_phone()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_phone;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(40)) goto parse_tint32;
        break;
      }

      // required int32 tint32 = 5;
      case 5: {
        if (tag == 40) {
         parse_tint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tint32_)));
          set_has_tint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tint64;
        break;
      }

      // required int64 tint64 = 6;
      case 6: {
        if (tag == 48) {
         parse_tint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tint64_)));
          set_has_tint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_tuint32;
        break;
      }

      // required uint32 tuint32 = 7;
      case 7: {
        if (tag == 56) {
         parse_tuint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tuint32_)));
          set_has_tuint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tuint64;
        break;
      }

      // required uint64 tuint64 = 8;
      case 8: {
        if (tag == 64) {
         parse_tuint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &tuint64_)));
          set_has_tuint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_tsint32;
        break;
      }

      // required sint32 tsint32 = 9;
      case 9: {
        if (tag == 72) {
         parse_tsint32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &tsint32_)));
          set_has_tsint32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_tsint64;
        break;
      }

      // required sint64 tsint64 = 10;
      case 10: {
        if (tag == 80) {
         parse_tsint64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &tsint64_)));
          set_has_tsint64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_tbool;
        break;
      }

      // required bool tbool = 11;
      case 11: {
        if (tag == 88) {
         parse_tbool:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tbool_)));
          set_has_tbool();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_tfixed64;
        break;
      }

      // required fixed64 tfixed64 = 12;
      case 12: {
        if (tag == 97) {
         parse_tfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &tfixed64_)));
          set_has_tfixed64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_tsfixed64;
        break;
      }

      // required sfixed64 tsfixed64 = 13;
      case 13: {
        if (tag == 105) {
         parse_tsfixed64:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &tsfixed64_)));
          set_has_tsfixed64();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_tdouble;
        break;
      }

      // required double tdouble = 14;
      case 14: {
        if (tag == 113) {
         parse_tdouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tdouble_)));
          set_has_tdouble();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_tfixed32;
        break;
      }

      // required fixed32 tfixed32 = 15;
      case 15: {
        if (tag == 125) {
         parse_tfixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &tfixed32_)));
          set_has_tfixed32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_tsfixed32;
        break;
      }

      // required sfixed32 tsfixed32 = 16;
      case 16: {
        if (tag == 133) {
         parse_tsfixed32:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED32>(
                 input, &tsfixed32_)));
          set_has_tsfixed32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_tfloat;
        break;
      }

      // required float tfloat = 17;
      case 17: {
        if (tag == 141) {
         parse_tfloat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfloat_)));
          set_has_tfloat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.Person)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.Person)
  return false;
#undef DO_
}

void Person::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.Person)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.Person.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.Person.email");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->email(), output);
  }

  // repeated .tutorial.Person.PhoneNumber phone = 4;
  for (unsigned int i = 0, n = this->phone_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->phone(i), output);
  }

  // required int32 tint32 = 5;
  if (has_tint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tint32(), output);
  }

  // required int64 tint64 = 6;
  if (has_tint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->tint64(), output);
  }

  // required uint32 tuint32 = 7;
  if (has_tuint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->tuint32(), output);
  }

  // required uint64 tuint64 = 8;
  if (has_tuint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(8, this->tuint64(), output);
  }

  // required sint32 tsint32 = 9;
  if (has_tsint32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(9, this->tsint32(), output);
  }

  // required sint64 tsint64 = 10;
  if (has_tsint64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(10, this->tsint64(), output);
  }

  // required bool tbool = 11;
  if (has_tbool()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->tbool(), output);
  }

  // required fixed64 tfixed64 = 12;
  if (has_tfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(12, this->tfixed64(), output);
  }

  // required sfixed64 tsfixed64 = 13;
  if (has_tsfixed64()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(13, this->tsfixed64(), output);
  }

  // required double tdouble = 14;
  if (has_tdouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->tdouble(), output);
  }

  // required fixed32 tfixed32 = 15;
  if (has_tfixed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(15, this->tfixed32(), output);
  }

  // required sfixed32 tsfixed32 = 16;
  if (has_tsfixed32()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed32(16, this->tsfixed32(), output);
  }

  // required float tfloat = 17;
  if (has_tfloat()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->tfloat(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.Person)
}

::google::protobuf::uint8* Person::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.Person)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.Person.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // optional string email = 3;
  if (has_email()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->email().data(), this->email().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tutorial.Person.email");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->email(), target);
  }

  // repeated .tutorial.Person.PhoneNumber phone = 4;
  for (unsigned int i = 0, n = this->phone_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->phone(i), target);
  }

  // required int32 tint32 = 5;
  if (has_tint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tint32(), target);
  }

  // required int64 tint64 = 6;
  if (has_tint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->tint64(), target);
  }

  // required uint32 tuint32 = 7;
  if (has_tuint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->tuint32(), target);
  }

  // required uint64 tuint64 = 8;
  if (has_tuint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(8, this->tuint64(), target);
  }

  // required sint32 tsint32 = 9;
  if (has_tsint32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(9, this->tsint32(), target);
  }

  // required sint64 tsint64 = 10;
  if (has_tsint64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(10, this->tsint64(), target);
  }

  // required bool tbool = 11;
  if (has_tbool()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->tbool(), target);
  }

  // required fixed64 tfixed64 = 12;
  if (has_tfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(12, this->tfixed64(), target);
  }

  // required sfixed64 tsfixed64 = 13;
  if (has_tsfixed64()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(13, this->tsfixed64(), target);
  }

  // required double tdouble = 14;
  if (has_tdouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->tdouble(), target);
  }

  // required fixed32 tfixed32 = 15;
  if (has_tfixed32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed32ToArray(15, this->tfixed32(), target);
  }

  // required sfixed32 tsfixed32 = 16;
  if (has_tsfixed32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed32ToArray(16, this->tsfixed32(), target);
  }

  // required float tfloat = 17;
  if (has_tfloat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->tfloat(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.Person)
  return target;
}

int Person::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  if (has_id()) {
    // required int64 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  if (has_tint32()) {
    // required int32 tint32 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tint32());
  }

  if (has_tint64()) {
    // required int64 tint64 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tint64());
  }

  if (has_tuint32()) {
    // required uint32 tuint32 = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tuint32());
  }

  if (has_tuint64()) {
    // required uint64 tuint64 = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tuint64());
  }

  if (has_tsint32()) {
    // required sint32 tsint32 = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->tsint32());
  }

  if (has_tsint64()) {
    // required sint64 tsint64 = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->tsint64());
  }

  if (has_tbool()) {
    // required bool tbool = 11;
    total_size += 1 + 1;
  }

  if (has_tfixed64()) {
    // required fixed64 tfixed64 = 12;
    total_size += 1 + 8;
  }

  if (has_tsfixed64()) {
    // required sfixed64 tsfixed64 = 13;
    total_size += 1 + 8;
  }

  if (has_tdouble()) {
    // required double tdouble = 14;
    total_size += 1 + 8;
  }

  if (has_tfixed32()) {
    // required fixed32 tfixed32 = 15;
    total_size += 1 + 4;
  }

  if (has_tsfixed32()) {
    // required sfixed32 tsfixed32 = 16;
    total_size += 2 + 4;
  }

  if (has_tfloat()) {
    // required float tfloat = 17;
    total_size += 2 + 4;
  }

  return total_size;
}
int Person::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0001fff3) ^ 0x0001fff3) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());

    // required int64 id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());

    // required int32 tint32 = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tint32());

    // required int64 tint64 = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tint64());

    // required uint32 tuint32 = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tuint32());

    // required uint64 tuint64 = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->tuint64());

    // required sint32 tsint32 = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt32Size(
        this->tsint32());

    // required sint64 tsint64 = 10;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::SInt64Size(
        this->tsint64());

    // required bool tbool = 11;
    total_size += 1 + 1;

    // required fixed64 tfixed64 = 12;
    total_size += 1 + 8;

    // required sfixed64 tsfixed64 = 13;
    total_size += 1 + 8;

    // required double tdouble = 14;
    total_size += 1 + 8;

    // required fixed32 tfixed32 = 15;
    total_size += 1 + 4;

    // required sfixed32 tsfixed32 = 16;
    total_size += 2 + 4;

    // required float tfloat = 17;
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string email = 3;
  if (has_email()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->email());
  }

  // repeated .tutorial.Person.PhoneNumber phone = 4;
  total_size += 1 * this->phone_size();
  for (int i = 0; i < this->phone_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->phone(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Person::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Person* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Person>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Person::MergeFrom(const Person& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  phone_.MergeFrom(from.phone_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_email()) {
      set_has_email();
      email_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.email_);
    }
    if (from.has_tint32()) {
      set_tint32(from.tint32());
    }
    if (from.has_tint64()) {
      set_tint64(from.tint64());
    }
    if (from.has_tuint32()) {
      set_tuint32(from.tuint32());
    }
    if (from.has_tuint64()) {
      set_tuint64(from.tuint64());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tsint32()) {
      set_tsint32(from.tsint32());
    }
    if (from.has_tsint64()) {
      set_tsint64(from.tsint64());
    }
    if (from.has_tbool()) {
      set_tbool(from.tbool());
    }
    if (from.has_tfixed64()) {
      set_tfixed64(from.tfixed64());
    }
    if (from.has_tsfixed64()) {
      set_tsfixed64(from.tsfixed64());
    }
    if (from.has_tdouble()) {
      set_tdouble(from.tdouble());
    }
    if (from.has_tfixed32()) {
      set_tfixed32(from.tfixed32());
    }
    if (from.has_tsfixed32()) {
      set_tsfixed32(from.tsfixed32());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tfloat()) {
      set_tfloat(from.tfloat());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Person::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Person::CopyFrom(const Person& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Person::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001fff3) != 0x0001fff3) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->phone())) return false;
  return true;
}

void Person::Swap(Person* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Person::InternalSwap(Person* other) {
  name_.Swap(&other->name_);
  std::swap(id_, other->id_);
  email_.Swap(&other->email_);
  phone_.UnsafeArenaSwap(&other->phone_);
  std::swap(tint32_, other->tint32_);
  std::swap(tint64_, other->tint64_);
  std::swap(tuint32_, other->tuint32_);
  std::swap(tuint64_, other->tuint64_);
  std::swap(tsint32_, other->tsint32_);
  std::swap(tsint64_, other->tsint64_);
  std::swap(tbool_, other->tbool_);
  std::swap(tfixed64_, other->tfixed64_);
  std::swap(tsfixed64_, other->tsfixed64_);
  std::swap(tdouble_, other->tdouble_);
  std::swap(tfixed32_, other->tfixed32_);
  std::swap(tsfixed32_, other->tsfixed32_);
  std::swap(tfloat_, other->tfloat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Person::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Person_descriptor_;
  metadata.reflection = Person_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Person_PhoneNumber

// required string number = 1;
bool Person_PhoneNumber::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Person_PhoneNumber::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
void Person_PhoneNumber::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
void Person_PhoneNumber::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_number();
}
 const ::std::string& Person_PhoneNumber::number() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.PhoneNumber.number)
  return number_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person_PhoneNumber::set_number(const ::std::string& value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Person.PhoneNumber.number)
}
 void Person_PhoneNumber::set_number(const char* value) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Person.PhoneNumber.number)
}
 void Person_PhoneNumber::set_number(const char* value, size_t size) {
  set_has_number();
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Person.PhoneNumber.number)
}
 ::std::string* Person_PhoneNumber::mutable_number() {
  set_has_number();
  // @@protoc_insertion_point(field_mutable:tutorial.Person.PhoneNumber.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person_PhoneNumber::release_number() {
  clear_has_number();
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person_PhoneNumber::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    set_has_number();
  } else {
    clear_has_number();
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Person.PhoneNumber.number)
}

// optional .tutorial.Person.PhoneType type = 2 [default = HOME];
bool Person_PhoneNumber::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Person_PhoneNumber::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Person_PhoneNumber::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Person_PhoneNumber::clear_type() {
  type_ = 1;
  clear_has_type();
}
 ::tutorial::Person_PhoneType Person_PhoneNumber::type() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.PhoneNumber.type)
  return static_cast< ::tutorial::Person_PhoneType >(type_);
}
 void Person_PhoneNumber::set_type(::tutorial::Person_PhoneType value) {
  assert(::tutorial::Person_PhoneType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.PhoneNumber.type)
}

// -------------------------------------------------------------------

// Person

// required string name = 1;
bool Person::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Person::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
void Person::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
void Person::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& Person::name() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Person.name)
}
 void Person::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Person.name)
}
 void Person::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Person.name)
}
 ::std::string* Person::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:tutorial.Person.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_name() {
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Person.name)
}

// required int64 id = 2;
bool Person::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Person::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
void Person::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void Person::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
 ::google::protobuf::int64 Person::id() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.id)
  return id_;
}
 void Person::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.id)
}

// optional string email = 3;
bool Person::has_email() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Person::set_has_email() {
  _has_bits_[0] |= 0x00000004u;
}
void Person::clear_has_email() {
  _has_bits_[0] &= ~0x00000004u;
}
void Person::clear_email() {
  email_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_email();
}
 const ::std::string& Person::email() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.email)
  return email_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_email(const ::std::string& value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tutorial.Person.email)
}
 void Person::set_email(const char* value) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tutorial.Person.email)
}
 void Person::set_email(const char* value, size_t size) {
  set_has_email();
  email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tutorial.Person.email)
}
 ::std::string* Person::mutable_email() {
  set_has_email();
  // @@protoc_insertion_point(field_mutable:tutorial.Person.email)
  return email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Person::release_email() {
  clear_has_email();
  return email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Person::set_allocated_email(::std::string* email) {
  if (email != NULL) {
    set_has_email();
  } else {
    clear_has_email();
  }
  email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  // @@protoc_insertion_point(field_set_allocated:tutorial.Person.email)
}

// repeated .tutorial.Person.PhoneNumber phone = 4;
int Person::phone_size() const {
  return phone_.size();
}
void Person::clear_phone() {
  phone_.Clear();
}
const ::tutorial::Person_PhoneNumber& Person::phone(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.Person.phone)
  return phone_.Get(index);
}
::tutorial::Person_PhoneNumber* Person::mutable_phone(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.Person.phone)
  return phone_.Mutable(index);
}
::tutorial::Person_PhoneNumber* Person::add_phone() {
  // @@protoc_insertion_point(field_add:tutorial.Person.phone)
  return phone_.Add();
}
::google::protobuf::RepeatedPtrField< ::tutorial::Person_PhoneNumber >*
Person::mutable_phone() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.Person.phone)
  return &phone_;
}
const ::google::protobuf::RepeatedPtrField< ::tutorial::Person_PhoneNumber >&
Person::phone() const {
  // @@protoc_insertion_point(field_list:tutorial.Person.phone)
  return phone_;
}

// required int32 tint32 = 5;
bool Person::has_tint32() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Person::set_has_tint32() {
  _has_bits_[0] |= 0x00000010u;
}
void Person::clear_has_tint32() {
  _has_bits_[0] &= ~0x00000010u;
}
void Person::clear_tint32() {
  tint32_ = 0;
  clear_has_tint32();
}
 ::google::protobuf::int32 Person::tint32() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tint32)
  return tint32_;
}
 void Person::set_tint32(::google::protobuf::int32 value) {
  set_has_tint32();
  tint32_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tint32)
}

// required int64 tint64 = 6;
bool Person::has_tint64() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Person::set_has_tint64() {
  _has_bits_[0] |= 0x00000020u;
}
void Person::clear_has_tint64() {
  _has_bits_[0] &= ~0x00000020u;
}
void Person::clear_tint64() {
  tint64_ = GOOGLE_LONGLONG(0);
  clear_has_tint64();
}
 ::google::protobuf::int64 Person::tint64() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tint64)
  return tint64_;
}
 void Person::set_tint64(::google::protobuf::int64 value) {
  set_has_tint64();
  tint64_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tint64)
}

// required uint32 tuint32 = 7;
bool Person::has_tuint32() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Person::set_has_tuint32() {
  _has_bits_[0] |= 0x00000040u;
}
void Person::clear_has_tuint32() {
  _has_bits_[0] &= ~0x00000040u;
}
void Person::clear_tuint32() {
  tuint32_ = 0u;
  clear_has_tuint32();
}
 ::google::protobuf::uint32 Person::tuint32() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tuint32)
  return tuint32_;
}
 void Person::set_tuint32(::google::protobuf::uint32 value) {
  set_has_tuint32();
  tuint32_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tuint32)
}

// required uint64 tuint64 = 8;
bool Person::has_tuint64() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Person::set_has_tuint64() {
  _has_bits_[0] |= 0x00000080u;
}
void Person::clear_has_tuint64() {
  _has_bits_[0] &= ~0x00000080u;
}
void Person::clear_tuint64() {
  tuint64_ = GOOGLE_ULONGLONG(0);
  clear_has_tuint64();
}
 ::google::protobuf::uint64 Person::tuint64() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tuint64)
  return tuint64_;
}
 void Person::set_tuint64(::google::protobuf::uint64 value) {
  set_has_tuint64();
  tuint64_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tuint64)
}

// required sint32 tsint32 = 9;
bool Person::has_tsint32() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Person::set_has_tsint32() {
  _has_bits_[0] |= 0x00000100u;
}
void Person::clear_has_tsint32() {
  _has_bits_[0] &= ~0x00000100u;
}
void Person::clear_tsint32() {
  tsint32_ = 0;
  clear_has_tsint32();
}
 ::google::protobuf::int32 Person::tsint32() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tsint32)
  return tsint32_;
}
 void Person::set_tsint32(::google::protobuf::int32 value) {
  set_has_tsint32();
  tsint32_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tsint32)
}

// required sint64 tsint64 = 10;
bool Person::has_tsint64() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Person::set_has_tsint64() {
  _has_bits_[0] |= 0x00000200u;
}
void Person::clear_has_tsint64() {
  _has_bits_[0] &= ~0x00000200u;
}
void Person::clear_tsint64() {
  tsint64_ = GOOGLE_LONGLONG(0);
  clear_has_tsint64();
}
 ::google::protobuf::int64 Person::tsint64() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tsint64)
  return tsint64_;
}
 void Person::set_tsint64(::google::protobuf::int64 value) {
  set_has_tsint64();
  tsint64_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tsint64)
}

// required bool tbool = 11;
bool Person::has_tbool() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Person::set_has_tbool() {
  _has_bits_[0] |= 0x00000400u;
}
void Person::clear_has_tbool() {
  _has_bits_[0] &= ~0x00000400u;
}
void Person::clear_tbool() {
  tbool_ = false;
  clear_has_tbool();
}
 bool Person::tbool() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tbool)
  return tbool_;
}
 void Person::set_tbool(bool value) {
  set_has_tbool();
  tbool_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tbool)
}

// required fixed64 tfixed64 = 12;
bool Person::has_tfixed64() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Person::set_has_tfixed64() {
  _has_bits_[0] |= 0x00000800u;
}
void Person::clear_has_tfixed64() {
  _has_bits_[0] &= ~0x00000800u;
}
void Person::clear_tfixed64() {
  tfixed64_ = GOOGLE_ULONGLONG(0);
  clear_has_tfixed64();
}
 ::google::protobuf::uint64 Person::tfixed64() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tfixed64)
  return tfixed64_;
}
 void Person::set_tfixed64(::google::protobuf::uint64 value) {
  set_has_tfixed64();
  tfixed64_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tfixed64)
}

// required sfixed64 tsfixed64 = 13;
bool Person::has_tsfixed64() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Person::set_has_tsfixed64() {
  _has_bits_[0] |= 0x00001000u;
}
void Person::clear_has_tsfixed64() {
  _has_bits_[0] &= ~0x00001000u;
}
void Person::clear_tsfixed64() {
  tsfixed64_ = GOOGLE_LONGLONG(0);
  clear_has_tsfixed64();
}
 ::google::protobuf::int64 Person::tsfixed64() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tsfixed64)
  return tsfixed64_;
}
 void Person::set_tsfixed64(::google::protobuf::int64 value) {
  set_has_tsfixed64();
  tsfixed64_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tsfixed64)
}

// required double tdouble = 14;
bool Person::has_tdouble() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Person::set_has_tdouble() {
  _has_bits_[0] |= 0x00002000u;
}
void Person::clear_has_tdouble() {
  _has_bits_[0] &= ~0x00002000u;
}
void Person::clear_tdouble() {
  tdouble_ = 0;
  clear_has_tdouble();
}
 double Person::tdouble() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tdouble)
  return tdouble_;
}
 void Person::set_tdouble(double value) {
  set_has_tdouble();
  tdouble_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tdouble)
}

// required fixed32 tfixed32 = 15;
bool Person::has_tfixed32() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Person::set_has_tfixed32() {
  _has_bits_[0] |= 0x00004000u;
}
void Person::clear_has_tfixed32() {
  _has_bits_[0] &= ~0x00004000u;
}
void Person::clear_tfixed32() {
  tfixed32_ = 0u;
  clear_has_tfixed32();
}
 ::google::protobuf::uint32 Person::tfixed32() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tfixed32)
  return tfixed32_;
}
 void Person::set_tfixed32(::google::protobuf::uint32 value) {
  set_has_tfixed32();
  tfixed32_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tfixed32)
}

// required sfixed32 tsfixed32 = 16;
bool Person::has_tsfixed32() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Person::set_has_tsfixed32() {
  _has_bits_[0] |= 0x00008000u;
}
void Person::clear_has_tsfixed32() {
  _has_bits_[0] &= ~0x00008000u;
}
void Person::clear_tsfixed32() {
  tsfixed32_ = 0;
  clear_has_tsfixed32();
}
 ::google::protobuf::int32 Person::tsfixed32() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tsfixed32)
  return tsfixed32_;
}
 void Person::set_tsfixed32(::google::protobuf::int32 value) {
  set_has_tsfixed32();
  tsfixed32_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tsfixed32)
}

// required float tfloat = 17;
bool Person::has_tfloat() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Person::set_has_tfloat() {
  _has_bits_[0] |= 0x00010000u;
}
void Person::clear_has_tfloat() {
  _has_bits_[0] &= ~0x00010000u;
}
void Person::clear_tfloat() {
  tfloat_ = 0;
  clear_has_tfloat();
}
 float Person::tfloat() const {
  // @@protoc_insertion_point(field_get:tutorial.Person.tfloat)
  return tfloat_;
}
 void Person::set_tfloat(float value) {
  set_has_tfloat();
  tfloat_ = value;
  // @@protoc_insertion_point(field_set:tutorial.Person.tfloat)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddressBook::kPersonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddressBook::AddressBook()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:tutorial.AddressBook)
}

void AddressBook::InitAsDefaultInstance() {
}

AddressBook::AddressBook(const AddressBook& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:tutorial.AddressBook)
}

void AddressBook::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddressBook::~AddressBook() {
  // @@protoc_insertion_point(destructor:tutorial.AddressBook)
  SharedDtor();
}

void AddressBook::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddressBook::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddressBook::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddressBook_descriptor_;
}

const AddressBook& AddressBook::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_addressbook_2eproto();
  return *default_instance_;
}

AddressBook* AddressBook::default_instance_ = NULL;

AddressBook* AddressBook::New(::google::protobuf::Arena* arena) const {
  AddressBook* n = new AddressBook;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddressBook::Clear() {
  person_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AddressBook::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tutorial.AddressBook)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tutorial.Person person = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_person:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_person()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_person;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tutorial.AddressBook)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tutorial.AddressBook)
  return false;
#undef DO_
}

void AddressBook::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tutorial.AddressBook)
  // repeated .tutorial.Person person = 1;
  for (unsigned int i = 0, n = this->person_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->person(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:tutorial.AddressBook)
}

::google::protobuf::uint8* AddressBook::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:tutorial.AddressBook)
  // repeated .tutorial.Person person = 1;
  for (unsigned int i = 0, n = this->person_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->person(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tutorial.AddressBook)
  return target;
}

int AddressBook::ByteSize() const {
  int total_size = 0;

  // repeated .tutorial.Person person = 1;
  total_size += 1 * this->person_size();
  for (int i = 0; i < this->person_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->person(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddressBook::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddressBook* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const AddressBook>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddressBook::MergeFrom(const AddressBook& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  person_.MergeFrom(from.person_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void AddressBook::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddressBook::CopyFrom(const AddressBook& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddressBook::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->person())) return false;
  return true;
}

void AddressBook::Swap(AddressBook* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddressBook::InternalSwap(AddressBook* other) {
  person_.UnsafeArenaSwap(&other->person_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddressBook::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddressBook_descriptor_;
  metadata.reflection = AddressBook_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddressBook

// repeated .tutorial.Person person = 1;
int AddressBook::person_size() const {
  return person_.size();
}
void AddressBook::clear_person() {
  person_.Clear();
}
const ::tutorial::Person& AddressBook::person(int index) const {
  // @@protoc_insertion_point(field_get:tutorial.AddressBook.person)
  return person_.Get(index);
}
::tutorial::Person* AddressBook::mutable_person(int index) {
  // @@protoc_insertion_point(field_mutable:tutorial.AddressBook.person)
  return person_.Mutable(index);
}
::tutorial::Person* AddressBook::add_person() {
  // @@protoc_insertion_point(field_add:tutorial.AddressBook.person)
  return person_.Add();
}
::google::protobuf::RepeatedPtrField< ::tutorial::Person >*
AddressBook::mutable_person() {
  // @@protoc_insertion_point(field_mutable_list:tutorial.AddressBook.person)
  return &person_;
}
const ::google::protobuf::RepeatedPtrField< ::tutorial::Person >&
AddressBook::person() const {
  // @@protoc_insertion_point(field_list:tutorial.AddressBook.person)
  return person_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tutorial

// @@protoc_insertion_point(global_scope)
